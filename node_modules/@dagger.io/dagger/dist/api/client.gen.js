/**
 * This file was auto-generated by `cloak clientgen`.
 * Do not make direct changes to the file.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { GraphQLClient } from "graphql-request";
import { queryBuilder } from "./utils.js";
class BaseClient {
    /**
     * @hidden
     */
    constructor({ queryTree, host } = {}) {
        this._queryTree = queryTree || [];
        this.clientHost = host || "127.0.0.1:8080";
        this.client = new GraphQLClient(`http://${host}/query`);
    }
    /**
     * @hidden
     */
    get queryTree() {
        return this._queryTree;
    }
}
/**
 * A directory whose contents persist across runs
 */
export class CacheVolume extends BaseClient {
    id() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "id",
                },
            ], this.client);
            return response;
        });
    }
}
/**
 * An OCI-compatible container, also known as a docker container
 */
export class Container extends BaseClient {
    /**
     * Initialize this container from a Dockerfile build
     */
    build(context, opts) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "build",
                    args: Object.assign({ context }, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Default arguments for future commands
     */
    defaultArgs() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "defaultArgs",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Retrieve a directory at the given path. Mounts are included.
     */
    directory(path) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "directory",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Entrypoint to be prepended to the arguments of all commands
     */
    entrypoint() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "entrypoint",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * The value of the specified environment variable
     */
    envVariable(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "envVariable",
                    args: { name },
                },
            ], this.client);
            return response;
        });
    }
    /**
     * A list of environment variables passed to commands
     */
    envVariables() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "envVariables",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * This container after executing the specified command inside it
     *
     * @param opts optional params for exec
     *
     * @deprecated Replaced by withExec.
     */
    exec(opts) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "exec",
                    args: Object.assign({}, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Exit code of the last executed command. Zero means success.
     * Null if no command has been executed.
     */
    exitCode() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "exitCode",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Write the container as an OCI tarball to the destination file path on the host
     */
    export(path, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "export",
                    args: Object.assign({ path }, opts),
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Retrieve a file at the given path. Mounts are included.
     */
    file(path) {
        return new File({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "file",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Initialize this container from the base image published at the given address
     */
    from(address) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "from",
                    args: { address },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container's root filesystem. Mounts are not included.
     *
     *
     * @deprecated Replaced by rootfs.
     */
    fs() {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "fs",
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * A unique identifier for this container
     */
    id() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "id",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * List of paths where a directory is mounted
     */
    mounts() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "mounts",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * The platform this container executes and publishes as
     */
    platform() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "platform",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Publish this container as a new image, returning a fully qualified ref
     */
    publish(address, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "publish",
                    args: Object.assign({ address }, opts),
                },
            ], this.client);
            return response;
        });
    }
    /**
     * This container's root filesystem. Mounts are not included.
     */
    rootfs() {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "rootfs",
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * The error stream of the last executed command.
     * Null if no command has been executed.
     */
    stderr() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "stderr",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * The output stream of the last executed command.
     * Null if no command has been executed.
     */
    stdout() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "stdout",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * The user to be set for all commands
     */
    user() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "user",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Configures default arguments for future commands
     */
    withDefaultArgs(opts) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withDefaultArgs",
                    args: Object.assign({}, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus a directory written at the given path
     */
    withDirectory(path, directory, opts) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withDirectory",
                    args: Object.assign({ path, directory }, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container but with a different command entrypoint
     */
    withEntrypoint(args) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withEntrypoint",
                    args: { args },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus the given environment variable
     */
    withEnvVariable(name, value) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withEnvVariable",
                    args: { name, value },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container after executing the specified command inside it
     */
    withExec(args, opts) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withExec",
                    args: Object.assign({ args }, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Initialize this container from this DirectoryID
     *
     *
     * @deprecated Replaced by withRootfs.
     */
    withFS(id) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withFS",
                    args: { id },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus the contents of the given file copied to the given path
     */
    withFile(path, source) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withFile",
                    args: { path, source },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus a cache volume mounted at the given path
     */
    withMountedCache(path, cache, opts) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withMountedCache",
                    args: Object.assign({ path, cache }, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus a directory mounted at the given path
     */
    withMountedDirectory(path, source) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withMountedDirectory",
                    args: { path, source },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus a file mounted at the given path
     */
    withMountedFile(path, source) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withMountedFile",
                    args: { path, source },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus a secret mounted into a file at the given path
     */
    withMountedSecret(path, source) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withMountedSecret",
                    args: { path, source },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus a temporary directory mounted at the given path
     */
    withMountedTemp(path) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withMountedTemp",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus a new file written at the given path
     */
    withNewFile(path, opts) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withNewFile",
                    args: Object.assign({ path }, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Initialize this container from this DirectoryID
     */
    withRootfs(id) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withRootfs",
                    args: { id },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus an env variable containing the given secret
     */
    withSecretVariable(name, secret) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withSecretVariable",
                    args: { name, secret },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container plus a socket forwarded to the given Unix socket path
     */
    withUnixSocket(path, source) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withUnixSocket",
                    args: { path, source },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container but with a different command user
     */
    withUser(name) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withUser",
                    args: { name },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container but with a different working directory
     */
    withWorkdir(path) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withWorkdir",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container minus the given environment variable
     */
    withoutEnvVariable(name) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withoutEnvVariable",
                    args: { name },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container after unmounting everything at the given path.
     */
    withoutMount(path) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withoutMount",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This container with a previously added Unix socket removed
     */
    withoutUnixSocket(path) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withoutUnixSocket",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * The working directory for all commands
     */
    workdir() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "workdir",
                },
            ], this.client);
            return response;
        });
    }
}
/**
 * A directory
 */
export class Directory extends BaseClient {
    /**
     * The difference between this directory and an another directory
     */
    diff(other) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "diff",
                    args: { other },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Retrieve a directory at the given path
     */
    directory(path) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "directory",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Build a new Docker container from this directory
     */
    dockerBuild(opts) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "dockerBuild",
                    args: Object.assign({}, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Return a list of files and directories at the given path
     */
    entries(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "entries",
                    args: Object.assign({}, opts),
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Write the contents of the directory to a path on the host
     */
    export(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "export",
                    args: { path },
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Retrieve a file at the given path
     */
    file(path) {
        return new File({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "file",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * The content-addressed identifier of the directory
     */
    id() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "id",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * load a project's metadata
     */
    loadProject(configPath) {
        return new Project({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "loadProject",
                    args: { configPath },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This directory plus a directory written at the given path
     */
    withDirectory(path, directory, opts) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withDirectory",
                    args: Object.assign({ path, directory }, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This directory plus the contents of the given file copied to the given path
     */
    withFile(path, source) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withFile",
                    args: { path, source },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This directory plus a new directory created at the given path
     */
    withNewDirectory(path) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withNewDirectory",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This directory plus a new file written at the given path
     */
    withNewFile(path, contents) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withNewFile",
                    args: { path, contents },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This directory with the directory at the given path removed
     */
    withoutDirectory(path) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withoutDirectory",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * This directory with the file at the given path removed
     */
    withoutFile(path) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "withoutFile",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
}
/**
 * EnvVariable is a simple key value object that represents an environment variable.
 */
export class EnvVariable extends BaseClient {
    /**
     * name is the environment variable name.
     */
    name() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "name",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * value is the environment variable value
     */
    value() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "value",
                },
            ], this.client);
            return response;
        });
    }
}
/**
 * A file
 */
export class File extends BaseClient {
    /**
     * The contents of the file
     */
    contents() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "contents",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Write the file to a file path on the host
     */
    export(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "export",
                    args: { path },
                },
            ], this.client);
            return response;
        });
    }
    /**
     * The content-addressed identifier of the file
     */
    id() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "id",
                },
            ], this.client);
            return response;
        });
    }
    secret() {
        return new Secret({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "secret",
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * The size of the file, in bytes
     */
    size() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "size",
                },
            ], this.client);
            return response;
        });
    }
}
/**
 * A git ref (tag or branch)
 */
export class GitRef extends BaseClient {
    /**
     * The digest of the current value of this ref
     */
    digest() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "digest",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * The filesystem tree at this ref
     */
    tree(opts) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "tree",
                    args: Object.assign({}, opts),
                },
            ],
            host: this.clientHost,
        });
    }
}
/**
 * A git repository
 */
export class GitRepository extends BaseClient {
    /**
     * Details on one branch
     */
    branch(name) {
        return new GitRef({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "branch",
                    args: { name },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * List of branches on the repository
     */
    branches() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "branches",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Details on one commit
     */
    commit(id) {
        return new GitRef({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "commit",
                    args: { id },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Details on one tag
     */
    tag(name) {
        return new GitRef({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "tag",
                    args: { name },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * List of tags on the repository
     */
    tags() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "tags",
                },
            ], this.client);
            return response;
        });
    }
}
/**
 * Information about the host execution environment
 */
export class Host extends BaseClient {
    /**
     * Access a directory on the host
     */
    directory(path, opts) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "directory",
                    args: Object.assign({ path }, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Access an environment variable on the host
     */
    envVariable(name) {
        return new HostVariable({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "envVariable",
                    args: { name },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Access a Unix socket on the host
     */
    unixSocket(path) {
        return new Socket({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "unixSocket",
                    args: { path },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * The current working directory on the host
     *
     * @param opts optional params for workdir
     *
     * @deprecated Use directory with path set to '.' instead.
     */
    workdir(opts) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "workdir",
                    args: Object.assign({}, opts),
                },
            ],
            host: this.clientHost,
        });
    }
}
/**
 * An environment variable on the host environment
 */
export class HostVariable extends BaseClient {
    /**
     * A secret referencing the value of this variable
     */
    secret() {
        return new Secret({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "secret",
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * The value of this variable
     */
    value() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "value",
                },
            ], this.client);
            return response;
        });
    }
}
/**
 * A set of scripts and/or extensions
 */
export class Project extends BaseClient {
    /**
     * extensions in this project
     */
    extensions() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "extensions",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Code files generated by the SDKs in the project
     */
    generatedCode() {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "generatedCode",
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * install the project's schema
     */
    install() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "install",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * name of the project
     */
    name() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "name",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * schema provided by the project
     */
    schema() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "schema",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * sdk used to generate code for and/or execute this project
     */
    sdk() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "sdk",
                },
            ], this.client);
            return response;
        });
    }
}
export default class Client extends BaseClient {
    /**
     * Construct a cache volume for a given cache key
     */
    cacheVolume(key) {
        return new CacheVolume({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "cacheVolume",
                    args: { key },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Load a container from ID.
     * Null ID returns an empty container (scratch).
     * Optional platform argument initializes new containers to execute and publish as that platform. Platform defaults to that of the builder's host.
     */
    container(opts) {
        return new Container({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "container",
                    args: Object.assign({}, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * The default platform of the builder.
     */
    defaultPlatform() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "defaultPlatform",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * Load a directory by ID. No argument produces an empty directory.
     */
    directory(opts) {
        return new Directory({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "directory",
                    args: Object.assign({}, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Load a file by ID
     */
    file(id) {
        return new File({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "file",
                    args: { id },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Query a git repository
     */
    git(url, opts) {
        return new GitRepository({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "git",
                    args: Object.assign({ url }, opts),
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Query the host environment
     */
    host() {
        return new Host({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "host",
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * An http remote
     */
    http(url) {
        return new File({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "http",
                    args: { url },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Look up a project by name
     */
    project(name) {
        return new Project({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "project",
                    args: { name },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Load a secret from its ID
     */
    secret(id) {
        return new Secret({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "secret",
                    args: { id },
                },
            ],
            host: this.clientHost,
        });
    }
    /**
     * Load a socket by ID
     */
    socket(opts) {
        return new Socket({
            queryTree: [
                ...this._queryTree,
                {
                    operation: "socket",
                    args: Object.assign({}, opts),
                },
            ],
            host: this.clientHost,
        });
    }
}
/**
 * A reference to a secret value, which can be handled more safely than the value itself
 */
export class Secret extends BaseClient {
    /**
     * The identifier for this secret
     */
    id() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "id",
                },
            ], this.client);
            return response;
        });
    }
    /**
     * The value of this secret
     */
    plaintext() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "plaintext",
                },
            ], this.client);
            return response;
        });
    }
}
export class Socket extends BaseClient {
    /**
     * The content-addressed identifier of the socket
     */
    id() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield queryBuilder([
                ...this._queryTree,
                {
                    operation: "id",
                },
            ], this.client);
            return response;
        });
    }
}
