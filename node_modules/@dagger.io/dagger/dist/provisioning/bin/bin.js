var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
import readline from "readline";
import { execaCommand } from "execa";
import Client from "../../api/client.gen.js";
import { EngineSessionPortParseError } from "../../common/errors/index.js";
/**
 * Bin runs an engine session from a specified binary
 */
export class Bin {
    constructor(u) {
        this.path = u.host + u.pathname;
        if (this.path == "") {
            // this results in execa looking for it in the $PATH
            this.path = "dagger-engine-session";
        }
    }
    Addr() {
        return "http://dagger";
    }
    Connect(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.runEngineSession(this.path, opts);
        });
    }
    /**
     * runEngineSession execute the engine binary and set up a GraphQL client that
     * target this engine.
     * TODO:(sipsma) dedupe this with equivalent code in image.ts
     */
    runEngineSession(engineSessionBinPath, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const engineSessionArgs = [engineSessionBinPath];
            if (opts.Workdir) {
                engineSessionArgs.push("--workdir", opts.Workdir);
            }
            if (opts.Project) {
                engineSessionArgs.push("--project", opts.Project);
            }
            this.subProcess = execaCommand(engineSessionArgs.join(" "), {
                stderr: opts.LogOutput || "ignore",
                // Kill the process if parent exit.
                cleanup: true,
            });
            const stdoutReader = readline.createInterface({
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                input: this.subProcess.stdout,
            });
            const port = yield Promise.race([
                this.readPort(stdoutReader),
                new Promise((_, reject) => {
                    setTimeout(() => {
                        reject(new EngineSessionPortParseError("timeout reading port from engine session"));
                    }, 300000).unref(); // long timeout to account for extensions, though that should be optimized in future
                }),
            ]);
            return new Client({ host: `127.0.0.1:${port}` });
        });
    }
    readPort(stdoutReader) {
        var _a, stdoutReader_1, stdoutReader_1_1;
        var _b, e_1, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                for (_a = true, stdoutReader_1 = __asyncValues(stdoutReader); stdoutReader_1_1 = yield stdoutReader_1.next(), _b = stdoutReader_1_1.done, !_b;) {
                    _d = stdoutReader_1_1.value;
                    _a = false;
                    try {
                        const line = _d;
                        // Read line as a port number
                        const port = parseInt(line);
                        if (isNaN(port)) {
                            throw new EngineSessionPortParseError(`failed to parse port from engine session while parsing: ${line}`, { parsedLine: line });
                        }
                        return port;
                    }
                    finally {
                        _a = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_a && !_b && (_c = stdoutReader_1.return)) yield _c.call(stdoutReader_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            throw new EngineSessionPortParseError("No line was found to parse the engine port");
        });
    }
    Close() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.subProcess) === null || _a === void 0 ? void 0 : _a.pid) {
                this.subProcess.kill("SIGTERM", {
                    forceKillAfterTimeout: 2000,
                });
            }
        });
    }
}
